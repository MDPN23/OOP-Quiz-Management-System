import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.Timer;


public class Soal extends javax.swing.JFrame {

    private Connection connection;
    private PreparedStatement preparedStatement;
    private ResultSet resultSet;
    public int nomor = 1;
    public int idSoal;
    public int idQuiz;
    Timer timer;
    int detik;
    int menit;
    
    public Soal() { 
        initComponents();
        connectToDatabase();
        idQuiz = 14;
        detik = 0;
        loadQuestion();
        cekNomor();
        hitungMundur();
    }
    
    public void hitungMundur(){
        try{
            String query = "SELECT * FROM `quiz` WHERE id = ? ;";
            preparedStatement = connection.prepareStatement(query);

            preparedStatement.setInt(1, idQuiz);
            resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                menit = (resultSet.getInt("batasWaktu"));
                java.sql.Date sqlDate = (resultSet.getDate("waktuQuiz"));
                System.out.println("test");
                Date currentDate = new Date();
                if (currentDate.after(sqlDate)) {
                System.out.println("test123");
                    JOptionPane.showMessageDialog(null, "Quiz telah berakhir karena anda mengakses setelah tanggal ditetapkan.");
                    System.exit(0);
                }
            }
        }catch (SQLException e) {
            e.printStackTrace();
        }
        timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(detik<10)
                    jLabel5.setText("0"+detik);
                else
                    jLabel5.setText(""+detik);
                if(menit<10)
                    jLabel4.setText("0"+menit);
                else
                    jLabel4.setText(""+menit);
                if(detik==0){
                    menit--;
                    if(menit<0){
                        JOptionPane.showMessageDialog(null,
                            "Waktu Habis, Aplikasi Keluar Otomatis");
                        timer.stop();
                        submitButtonActionPerformed(e);
                        System.exit(0);
                    }
                    detik = 60;
                }
                detik--;
            }
        });
        timer.start();
    }
    
    private void cekNomor(){
        if (nomor == 1){
            prev.setVisible(false);
            submitButton.setVisible(false);
        }else{
            prev.setVisible(true);
        }
        
        if(nomor == 5){
            next.setVisible(false);
            submitButton.setVisible(true);
        }else{
            next.setVisible(true);
        }
    }
    
    private void connectToDatabase() {
        try {
            String url = "jdbc:mysql://localhost:3306/soal";
            String username = "root";
            String password = "";

            connection = DriverManager.getConnection(url, username, password);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    private void loadQuestion() {
        cekNomor();
        try {
            String nomorString = String.valueOf(nomor);
            dNomor.setText(nomorString);
            String query = "SELECT * FROM `relasi-quiz-soal` JOIN `soal` ON `relasi-quiz-soal`.soal = `soal`.id WHERE `relasi-quiz-soal`.quiz = ? AND `relasi-quiz-soal`.nomor = ? ;";
            preparedStatement = connection.prepareStatement(query);

            preparedStatement.setInt(1, idQuiz);
            preparedStatement.setInt(2, nomor);
            resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                soal.setText(resultSet.getString("pertanyaan"));
                trueJaw.setText("true");
                falseJaw.setText("false");
                idSoal = resultSet.getInt("soal");
            }else{
                soal.setText("error");
                trueJaw.setText("true");
                falseJaw.setText("false");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jSlider1 = new javax.swing.JSlider();
        trueJaw = new javax.swing.JRadioButton();
        falseJaw = new javax.swing.JRadioButton();
        next = new javax.swing.JButton();
        prev = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        soal = new javax.swing.JTextPane();
        dNomor = new javax.swing.JLabel();
        submitButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonGroup1.add(trueJaw);
        trueJaw.setText("jRadioButton1");
        trueJaw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trueJawActionPerformed(evt);
            }
        });

        buttonGroup1.add(falseJaw);
        falseJaw.setText("jRadioButton3");
        falseJaw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                falseJawActionPerformed(evt);
            }
        });

        next.setText("NEXT");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        prev.setText("PREV");
        prev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(soal);

        dNomor.setText("jLabel2");

        submitButton.setText("SUBMIT");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("jLabel2");

        jLabel5.setText("jLabel2");

        jLabel2.setText(":");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(trueJaw)
                            .addComponent(prev))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(falseJaw)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(submitButton)
                                .addGap(81, 81, 81)
                                .addComponent(next)))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(217, 217, 217)
                .addComponent(dNomor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dNomor)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel2))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(trueJaw)
                            .addComponent(falseJaw))
                        .addContainerGap(104, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(submitButton)
                            .addComponent(prev)
                            .addComponent(next))
                        .addGap(28, 28, 28))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void prevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevActionPerformed
        nomor--;
        trueJaw.setSelected(false);
        falseJaw.setSelected(false);
        buttonGroup1.clearSelection();
        loadQuestion();
    }//GEN-LAST:event_prevActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        nomor++;
        trueJaw.setSelected(false);
        falseJaw.setSelected(false);
        buttonGroup1.clearSelection();
        loadQuestion();
    }//GEN-LAST:event_nextActionPerformed

    private void falseJawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_falseJawActionPerformed
        try {
            String query = "UPDATE `relasi-quiz-soal` SET jawaban = ? WHERE soal = ?;";
            preparedStatement = connection.prepareStatement(query);
            preparedStatement.setBoolean(1, false);
            preparedStatement.setInt(2, idSoal);
            int rowsAffected = preparedStatement.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Update successful. Rows affected: " + rowsAffected + idSoal );
            } else {
                System.out.println("No rows updated.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_falseJawActionPerformed

    private void trueJawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trueJawActionPerformed
        try {
            String query = "UPDATE `relasi-quiz-soal` SET jawaban = ? WHERE soal = ?;";
            preparedStatement = connection.prepareStatement(query);
            preparedStatement.setBoolean(1, true);
            preparedStatement.setInt(2, idSoal);
            int rowsAffected = preparedStatement.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Update successful. Rows affected: " + rowsAffected + idSoal);
            } else {
                System.out.println("No rows updated.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_trueJawActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        int total = 0;
        boolean hasilJaw ;
        boolean hasilKun ;
        try {
            String nomorString = String.valueOf(nomor);
            dNomor.setText(nomorString);
            String query = "SELECT * FROM `relasi-quiz-soal` WHERE quiz = ? AND nomor = ?;";
            preparedStatement = connection.prepareStatement(query);

            preparedStatement.setInt(1, idQuiz);
            preparedStatement.setInt(2, 1);

            resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                hasilJaw = resultSet.getBoolean("jawaban");
                hasilKun = resultSet.getBoolean("kunci");
                if(hasilJaw == hasilKun){
                    total = total + 20;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            String nomorString = String.valueOf(nomor);
            dNomor.setText(nomorString);
            String query = "SELECT * FROM `relasi-quiz-soal` WHERE quiz = ? AND nomor = ?;";
            preparedStatement = connection.prepareStatement(query);

            preparedStatement.setInt(1, idQuiz);
            preparedStatement.setInt(2, 1);

            resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                hasilJaw = resultSet.getBoolean("jawaban");
                hasilKun = resultSet.getBoolean("kunci");
                if(hasilJaw == hasilKun){
                    total = total + 20;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            String nomorString = String.valueOf(nomor);
            dNomor.setText(nomorString);
            String query = "SELECT * FROM `relasi-quiz-soal` WHERE quiz = ? AND nomor = ?;";
            preparedStatement = connection.prepareStatement(query);

            preparedStatement.setInt(1, idQuiz);
            preparedStatement.setInt(2, 2);

            resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                hasilJaw = resultSet.getBoolean("jawaban");
                hasilKun = resultSet.getBoolean("kunci");
                if(hasilJaw == hasilKun){
                    total = total + 20;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            String nomorString = String.valueOf(nomor);
            dNomor.setText(nomorString);
            String query = "SELECT * FROM `relasi-quiz-soal` WHERE quiz = ? AND nomor = ?;";
            preparedStatement = connection.prepareStatement(query);

            preparedStatement.setInt(1, idQuiz);
            preparedStatement.setInt(2, 3);

            resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                hasilJaw = resultSet.getBoolean("jawaban");
                hasilKun = resultSet.getBoolean("kunci");
                if(hasilJaw == hasilKun){
                    total = total + 20;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            String nomorString = String.valueOf(nomor);
            dNomor.setText(nomorString);
            String query = "SELECT * FROM `relasi-quiz-soal` WHERE quiz = ? AND nomor = ?;";
            preparedStatement = connection.prepareStatement(query);

            preparedStatement.setInt(1, idQuiz);
            preparedStatement.setInt(2, 4);

            resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                hasilJaw = resultSet.getBoolean("jawaban");
                hasilKun = resultSet.getBoolean("kunci");
                if(hasilJaw == hasilKun){
                    total = total + 20;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            String nomorString = String.valueOf(nomor);
            dNomor.setText(nomorString);
            String query = "SELECT * FROM `relasi-quiz-soal` WHERE quiz = ? AND nomor = ?;";
            preparedStatement = connection.prepareStatement(query);

            preparedStatement.setInt(1, idQuiz);
            preparedStatement.setInt(2, 5);

            resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                hasilJaw = resultSet.getBoolean("jawaban");
                hasilKun = resultSet.getBoolean("kunci");
                if(hasilJaw == hasilKun){
                    total = total + 20;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        try {
            
            String query = "UPDATE `quiz` SET skor = ? WHERE id = ?;";
            preparedStatement = connection.prepareStatement(query);
            preparedStatement.setInt(1, total);
            preparedStatement.setInt(2, idQuiz);
            int rowsAffected = preparedStatement.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Update successful. Rows affected: " + rowsAffected);
            } else {
                System.out.println("No rows updated.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Soal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Soal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Soal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Soal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Soal().setVisible(true);
            }
        });
    }
    
    @Override
    public void dispose() {
        super.dispose();
        try {
            if (resultSet != null) resultSet.close();
            if (preparedStatement != null) preparedStatement.close();
            if (connection != null) connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JLabel dNomor;
    private javax.swing.JRadioButton falseJaw;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JButton next;
    private javax.swing.JButton prev;
    private javax.swing.JTextPane soal;
    private javax.swing.JButton submitButton;
    private javax.swing.JRadioButton trueJaw;
    // End of variables declaration//GEN-END:variables
}
