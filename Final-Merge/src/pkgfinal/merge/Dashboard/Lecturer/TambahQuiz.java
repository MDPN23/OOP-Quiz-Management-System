package pkgfinal.merge.Dashboard.Lecturer;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class TambahQuiz extends javax.swing.JFrame {

    private Connection connection;
    private PreparedStatement preparedStatement;
    private ResultSet resultSet;
    public int nomor = 1;
    public int idSoal ; 
    
    public TambahQuiz() {
        initComponents();
        connectToDatabase();
    }
    
        private void connectToDatabase() {
        try {
            String url = "jdbc:mysql://localhost:3306/data-quiz";
            String username = "root";
            String password = "";

            connection = DriverManager.getConnection(url, username, password);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jTextField11 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        submitButton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Masukkan nama quiz :");

        jLabel2.setText("Masukkan lama quiz dalam menit :");

        jLabel3.setText("Masukkan pertanyaan untuk soal 1:");

        jLabel4.setText("Masukkan jawaban untuk soal 1 (true / false):");

        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jLabel5.setText("Masukkan pertanyaan untuk soal 2:");

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jLabel6.setText("Masukkan jawaban untuk soal 2 (true / false):");

        jLabel7.setText("Masukkan pertanyaan untuk soal 3:");

        jLabel8.setText("Masukkan jawaban untuk soal 3 (true / false):");

        jLabel9.setText("Masukkan pertanyaan untuk soal 4:");

        jLabel10.setText("Masukkan jawaban untuk soal 4 (true / false):");

        jLabel11.setText("Masukkan pertanyaan untuk soal 5:");

        jLabel12.setText("Masukkan jawaban untuk soal 5 (true / false):");

        jTextField10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField10ActionPerformed(evt);
            }
        });

        submitButton.setText("SUBMIT");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        jLabel13.setText("Masukkan Tanggal Max Pengerjaan :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField7))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField9))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField11))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel13)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jTextField1)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel8)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel10)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(18, 18, 18)
                                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel12)
                                        .addComponent(submitButton))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(0, 0, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(submitButton)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        String fieldNama = jTextField1.getText();
        String teksDariFieldWaktu = jTextField2.getText();
        int fieldWaktu = Integer.parseInt(teksDariFieldWaktu);
        
        String Pertanyaan1 = jTextField3.getText();
        String teksDariFieldJawaban1 = jTextField4.getText().toLowerCase();
        boolean jawaban1 = Boolean.parseBoolean(teksDariFieldJawaban1);
        
        String Pertanyaan2 = jTextField5.getText();
        String teksDariFieldJawaban2 = jTextField6.getText().toLowerCase();
        boolean jawaban2 = Boolean.parseBoolean(teksDariFieldJawaban2);
        
        String Pertanyaan3 = jTextField7.getText();
        String teksDariFieldJawaban3 = jTextField8.getText().toLowerCase();
        boolean jawaban3 = Boolean.parseBoolean(teksDariFieldJawaban3);
        
        String Pertanyaan4 = jTextField9.getText();
        String teksDariFieldJawaban4 = jTextField10.getText().toLowerCase();
        boolean jawaban4 = Boolean.parseBoolean(teksDariFieldJawaban4);
        
        String Pertanyaan5 = jTextField11.getText();
        String teksDariFieldJawaban5 = jTextField12.getText().toLowerCase();
        boolean jawaban5 = Boolean.parseBoolean(teksDariFieldJawaban5);
        
        java.util.Date selectedDate = jDateChooser1.getDate();
    
        java.sql.Date sqlDate = new java.sql.Date(selectedDate.getTime());

        System.out.println("Selected Date: " + sqlDate);
        
        
        if(Pertanyaan1 != null && Pertanyaan2 != null && Pertanyaan3 != null && Pertanyaan4 != null && Pertanyaan5 != null){
            int generatedQuizId = 0;
            int generatedSoalId1 = 0;
            int generatedSoalId2 = 0;
            int generatedSoalId3 = 0;
            int generatedSoalId4 = 0;
            int generatedSoalId5 = 0;
            try {
                String query = "INSERT INTO `data-quiz` (nama, batasWaktu, waktuQuiz) VALUES ( ? , ? , ? );";
                preparedStatement = connection.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
                preparedStatement.setString(1, fieldNama);
                preparedStatement.setInt(2, fieldWaktu);
                preparedStatement.setDate(3, sqlDate);
                int rowsAffected = preparedStatement.executeUpdate();
                if (rowsAffected > 0) {
                    System.out.println("INSERT quiz successful. Rows affected: " + rowsAffected);
                    try (ResultSet generatedKeys = preparedStatement.getGeneratedKeys()) {
                        if (generatedKeys.next()) {
                            generatedQuizId = generatedKeys.getInt(1);
                            System.out.println("Generated Quiz ID: " + generatedQuizId);
                        }
                    }
                } else {
                    System.out.println("No rows INSERT.");
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            
            try {
                String query = "INSERT INTO `data-soal` (pertanyaan) VALUES ( ? );";
                preparedStatement = connection.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
                preparedStatement.setString(1, Pertanyaan1);
                int rowsAffected = preparedStatement.executeUpdate();
                if (rowsAffected > 0) {
                    System.out.println("INSERT quiz successful. Rows affected: " + rowsAffected);
                    try (ResultSet generatedKeys = preparedStatement.getGeneratedKeys()) {
                        if (generatedKeys.next()) {
                            generatedSoalId1 = generatedKeys.getInt(1);
                            System.out.println("Generated Soal ID: " + generatedSoalId1);
                        }
                    }
                } else {
                    System.out.println("No rows INSERT.");
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            
            try {
                String query = "INSERT INTO `data-soal` (pertanyaan) VALUES ( ? );";
                preparedStatement = connection.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
                preparedStatement.setString(1, Pertanyaan2);
                int rowsAffected = preparedStatement.executeUpdate();
                if (rowsAffected > 0) {
                    System.out.println("INSERT quiz successful. Rows affected: " + rowsAffected);
                    try (ResultSet generatedKeys = preparedStatement.getGeneratedKeys()) {
                        if (generatedKeys.next()) {
                            generatedSoalId2 = generatedKeys.getInt(1);
                            System.out.println("Generated Soal ID: " + generatedSoalId2);
                        }
                    }
                } else {
                    System.out.println("No rows INSERT.");
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            
            try {
                String query = "INSERT INTO `data-soal` (pertanyaan) VALUES ( ? );";
                preparedStatement = connection.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
                preparedStatement.setString(1, Pertanyaan3);
                int rowsAffected = preparedStatement.executeUpdate();
                if (rowsAffected > 0) {
                    System.out.println("INSERT quiz successful. Rows affected: " + rowsAffected);
                    try (ResultSet generatedKeys = preparedStatement.getGeneratedKeys()) {
                        if (generatedKeys.next()) {
                            generatedSoalId3 = generatedKeys.getInt(1);
                            System.out.println("Generated Soal ID: " + generatedSoalId3);
                        }
                    }
                } else {
                    System.out.println("No rows INSERT.");
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            
            try {
                String query = "INSERT INTO `data-soal` (pertanyaan) VALUES ( ? );";
                preparedStatement = connection.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
                preparedStatement.setString(1, Pertanyaan4);
                int rowsAffected = preparedStatement.executeUpdate();
                if (rowsAffected > 0) {
                    System.out.println("INSERT quiz successful. Rows affected: " + rowsAffected);
                    try (ResultSet generatedKeys = preparedStatement.getGeneratedKeys()) {
                        if (generatedKeys.next()) {
                            generatedSoalId4 = generatedKeys.getInt(1);
                            System.out.println("Generated Soal ID: " + generatedSoalId4);
                        }
                    }
                } else {
                    System.out.println("No rows INSERT.");
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            
            try {
                String query = "INSERT INTO `data-soal` (pertanyaan) VALUES ( ? );";
                preparedStatement = connection.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
                preparedStatement.setString(1, Pertanyaan5);
                int rowsAffected = preparedStatement.executeUpdate();
                if (rowsAffected > 0) {
                    System.out.println("INSERT quiz successful. Rows affected: " + rowsAffected);
                    try (ResultSet generatedKeys = preparedStatement.getGeneratedKeys()) {
                        if (generatedKeys.next()) {
                            generatedSoalId5 = generatedKeys.getInt(1);
                            System.out.println("Generated Soal ID: " + generatedSoalId5);
                        }
                    }
                } else {
                    System.out.println("No rows INSERT.");
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            
            try {
                String query = "INSERT INTO `relasi-quiz-soal` (quiz, soal, kunci, nomor) VALUES ( ? , ? , ? , ? );";
                preparedStatement = connection.prepareStatement(query);
                preparedStatement.setInt(1, generatedQuizId);
                preparedStatement.setInt(2, generatedSoalId1);
                preparedStatement.setBoolean(3, jawaban1);
                preparedStatement.setInt(4, 1);
                int rowsAffected = preparedStatement.executeUpdate();
                if (rowsAffected > 0) {
                    System.out.println("INSERT quiz successful. Rows affected: " + rowsAffected);
                } else {
                    System.out.println("No rows INSERT.");
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            
            try {
                String query = "INSERT INTO `relasi-quiz-soal` (quiz, soal, kunci, nomor) VALUES ( ? , ? , ? , ? );";
                preparedStatement = connection.prepareStatement(query);
                preparedStatement.setInt(1, generatedQuizId);
                preparedStatement.setInt(2, generatedSoalId2);
                preparedStatement.setBoolean(3, jawaban2);
                preparedStatement.setInt(4, 2);
                int rowsAffected = preparedStatement.executeUpdate();
                if (rowsAffected > 0) {
                    System.out.println("INSERT quiz successful. Rows affected: " + rowsAffected);
                } else {
                    System.out.println("No rows INSERT.");
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            
            try {
                String query = "INSERT INTO `relasi-quiz-soal` (quiz, soal, kunci, nomor) VALUES ( ? , ? , ? , ? );";
                preparedStatement = connection.prepareStatement(query);
                preparedStatement.setInt(1, generatedQuizId);
                preparedStatement.setInt(2, generatedSoalId3);
                preparedStatement.setBoolean(3, jawaban3);
                preparedStatement.setInt(4, 3);
                int rowsAffected = preparedStatement.executeUpdate();
                if (rowsAffected > 0) {
                    System.out.println("INSERT quiz successful. Rows affected: " + rowsAffected);
                } else {
                    System.out.println("No rows INSERT.");
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            
            try {
                String query = "INSERT INTO `relasi-quiz-soal` (quiz, soal, kunci, nomor) VALUES ( ? , ? , ? , ? );";
                preparedStatement = connection.prepareStatement(query);
                preparedStatement.setInt(1, generatedQuizId);
                preparedStatement.setInt(2, generatedSoalId4);
                preparedStatement.setBoolean(3, jawaban4);
                preparedStatement.setInt(4, 4);
                int rowsAffected = preparedStatement.executeUpdate();
                if (rowsAffected > 0) {
                    System.out.println("INSERT quiz successful. Rows affected: " + rowsAffected);
                } else {
                    System.out.println("No rows INSERT.");
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            
            try {
                String query = "INSERT INTO `relasi-quiz-soal` (quiz, soal, kunci, nomor) VALUES ( ? , ? , ? , ? );";
                preparedStatement = connection.prepareStatement(query);
                preparedStatement.setInt(1, generatedQuizId);
                preparedStatement.setInt(2, generatedSoalId5);
                preparedStatement.setBoolean(3, jawaban5);
                preparedStatement.setInt(4, 5);
                int rowsAffected = preparedStatement.executeUpdate();
                if (rowsAffected > 0) {
                    System.out.println("INSERT quiz successful. Rows affected: " + rowsAffected);
                } else {
                    System.out.println("No rows INSERT.");
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            
            
        }
        Dashboard_Quiz_Lecturer dql = new Dashboard_Quiz_Lecturer();
        dql.show();
        dispose();
        
    }//GEN-LAST:event_submitButtonActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jTextField10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField10ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TambahQuiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TambahQuiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TambahQuiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TambahQuiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TambahQuiz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JButton submitButton;
    // End of variables declaration//GEN-END:variables
}
